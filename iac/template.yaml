AWSTemplateFormatVersion: 2010-09-09

Description: Hosts a docker container (web app) in Amazon ECS on an EC2 host...

Parameters:

  ClusterName:
    Type: String

  EC2ImageId:
    Type: String

  EC2InstanceType:
    Type: String

  ServiceName:
    Type: String

  ContainerImage:
    Type: String

  RoleName:
    Type: String

  KeyPairName:
    Type: String

  LaunchConfigurationName:
    Type: String

  SubnetIds:
    Type: List<String>

  AutoScalingGroupMinSize:
    Type: String

  AutoScalingGroupMaxSize:
    Type: String

  VpcId:
    Type: String

  ContainerServiceDesiredCount:
    Type: Number

  ALBListenerPort:
    Type: Number

  ALBListenerProtocol:
    Type: String

  ECSHostPort:
    Type: Number

  ECSContainerPort:
    Type: Number

  ECSTaskMemory:
    Type: String

Resources:

  # EC2 Instance Configuration

  myLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Ref LaunchConfigurationName
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref myInstanceProfile
      SecurityGroups:
        - !Ref myEC2SecurityGroup
      UserData:
        'Fn::Base64':
          !Sub |
          #!/bin/bash -x
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myLaunchConfiguration
    Properties:
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      LaunchConfigurationName: !Ref LaunchConfigurationName
      AvailabilityZones:
        Fn::GetAZs: !Ref AWS::Region

  myInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn: myRole
    Properties:
      Roles:
        - !Ref RoleName

  myRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref RoleName
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  myEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${ClusterName} EC2 instances"
      SecurityGroupIngress:
        - Description: allow incoming ssh connections
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - Description: allow incoming http connections
          IpProtocol: tcp
          FromPort: !Ref ECSHostPort
          ToPort: !Ref ECSHostPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} ec2 sg"

  # ALB Configuration

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: myALBSecurityGroup
    Properties:
      Type: "application"
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref myALBSecurityGroup

  myALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - myALB
      - myTargetGroup
    Properties:
      Port: !Ref ALBListenerPort
      Protocol: !Ref ALBListenerProtocol
      LoadBalancerArn: !Ref myALB
      DefaultActions:
        - Type: "forward"
          TargetGroupARN: !Ref myTargetGroup

  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref ALBListenerPort
      Protocol: !Ref ALBListenerProtocol
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2

  myALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Sub "SG for ${ClusterName} ALB"
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - Description: allow incoming http connections
            IpProtocol: tcp
            FromPort: !Ref ALBListenerPort
            ToPort: !Ref ALBListenerPort
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName} alb sg"

  # ECS Cluster

  myECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # ECS Container Service Configuration

  myContainerService:
    Type: AWS::ECS::Service
    DependsOn: myALBListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref myTaskDefinition
      DesiredCount: !Ref ContainerServiceDesiredCount
      LaunchType: EC2
      LoadBalancers:
        - TargetGroupARN: !Ref myTargetGroup
          ContainerName: !Ref ServiceName
          ContainerPort: !Ref ECSContainerPort
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100

  myTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: !Ref ECSTaskMemory
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ECSContainerPort
              HostPort: !Ref ECSHostPort
              Protocol: tcp