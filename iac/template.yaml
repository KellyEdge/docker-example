AWSTemplateFormatVersion: 2010-09-09

Description: Hosts a docker container (web app) in Amazon ECS on an EC2 host...

Parameters:

  ClusterName:
    Type: String

  EC2ImageId:
    Type: String

  EC2InstanceType:
    Type: String

  ServiceName:
    Type: String

  ContainerImage:
    Type: String

  RoleName:
    Type: String

  KeyPairName:
    Type: String

  LaunchConfigurationName:
    Type: String

Resources:

  # EC2 Instance Configuration

  myLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Ref LaunchConfigurationName
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref myInstanceProfile
      SecurityGroups:
        - !Ref myEC2SecurityGroup
      UserData:
        'Fn::Base64':
          !Sub |
          #!/bin/bash -x
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myLaunchConfiguration
    Properties:
      MinSize: "2"
      MaxSize: "2"
      LaunchConfigurationName: !Ref LaunchConfigurationName
      AvailabilityZones: !GetAZs "us-east-2"

  myInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn: myRole
    Properties:
      Roles:
        - !Ref RoleName

  myRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref RoleName
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  myEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${ClusterName} EC2 instances"
      SecurityGroupIngress:
        - Description: allow incoming ssh connections
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - Description: allow incoming http connections
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg"

  # ECS Cluster

  myECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ClusterName}"

  # ECS Container Service Configuration

  myContainerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref myTaskDefinition
      DesiredCount: 2
      LaunchType: EC2

  myTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 512
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp